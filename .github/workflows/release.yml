name: Release Erebus

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  APP_NAME: erebus
  CONFIG_DIR: etc

jobs:
  build-and-package:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
            archive_format: tar.gz
          - name: linux-arm64
            runner: ubuntu-latest
            goos: linux
            goarch: arm64
            archive_format: tar.gz
          - name: windows-amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
            archive_format: zip
            binary_ext: .exe
          - name: darwin-amd64
            runner: macos-latest
            goos: darwin
            goarch: amd64
            archive_format: tar.gz
          - name: darwin-arm64
            runner: macos-latest
            goos: darwin
            goarch: arm64
            archive_format: tar.gz

    outputs:
      target_tag: ${{ steps.get_tag.outputs.tag }}
      archive_names: ${{ steps.set_archive_name_unix.outputs.archive_name || steps.set_archive_name_win.outputs.archive_name }}

    steps:
      - name: Get target tag
        id: get_tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          # 验证标签格式
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "警告: 标签格式不符合预期: $TAG"
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "最终标签: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.get_tag.outputs.tag }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: go test -v ./...

      - name: Build with Makefile
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          CGO_ENABLED: 0
        run: make

      - name: Verify binary (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if [ ! -f "$BINARY" ]; then
            echo "Error: Binary '$BINARY' not found!"
            ls -la
            exit 1
          fi
          file "$BINARY"
          chmod +x "$BINARY"
          echo "✅ 二进制文件验证成功: $BINARY"

      - name: Verify binary (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if (-not (Test-Path $binary -PathType Leaf)) {
            Write-Error "Error: Binary '$binary' not found!"
            Get-ChildItem
            exit 1
          }
          Get-Item $binary
          Write-Host "✅ Windows 二进制文件验证成功: $binary"

      - name: Create package and archive (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        id: set_archive_name_unix
        run: |
          # 统一标签获取逻辑
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          # 如果标签为空，使用默认值
          if [ -z "$TAG" ]; then
            TAG="unknown"
            echo "警告: 标签为空，使用默认值: $TAG"
          fi
          
          ARCHIVE_NAME="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          echo "生成压缩包名称: $ARCHIVE_NAME"
          
          PACKAGE_DIR="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}"
          mkdir -p "$PACKAGE_DIR/${{ env.CONFIG_DIR }}"
          cp "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}" "$PACKAGE_DIR/"
          chmod +x "$PACKAGE_DIR/${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          
          # 复制配置文件
          if [ -d "${{ env.CONFIG_DIR }}" ]; then
            cp -r "${{ env.CONFIG_DIR }}"/* "$PACKAGE_DIR/${{ env.CONFIG_DIR }}/" 2>/dev/null || true
            echo "配置文件已复制到包中"
          else
            echo "警告: 配置目录 ${{ env.CONFIG_DIR }} 不存在"
          fi
          
          # 创建压缩包
          tar -czf "$ARCHIVE_NAME" "$PACKAGE_DIR"
          
          # 验证压缩包
          if [ ! -f "$ARCHIVE_NAME" ]; then
            echo "错误: 压缩包创建失败!"
            exit 1
          fi
          
          echo "ARCHIVE_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "✅ 压缩包创建成功: $ARCHIVE_NAME"
          echo "文件大小: $(du -h $ARCHIVE_NAME | cut -f1)"

      - name: Create package and archive (Windows)
        if: matrix.platform.goos == 'windows'
        id: set_archive_name_win
        run: |
          # 统一标签获取逻辑
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $tag = "${{ github.event.inputs.tag_name }}"
          } else {
            $tag = "${{ github.ref_name }}"
          }
          
          # 如果标签为空，使用默认值
          if ([string]::IsNullOrEmpty($tag)) {
            $tag = "unknown"
            Write-Host "警告: 标签为空，使用默认值: $tag"
          }
          
          Write-Host "最终使用的Tag: '$tag'"
          
          $archiveName = "${{ env.APP_NAME }}_$($tag)_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          Write-Host "生成的压缩包名称: $archiveName"
          
          $packageDir = "${{ env.APP_NAME }}_$($tag)_${{ matrix.platform.name }}"
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          
          # 创建目录结构
          New-Item -ItemType Directory -Path "$packageDir\${{ env.CONFIG_DIR }}" -Force | Out-Null
          Copy-Item -Path $binary -Destination "$packageDir\" -Force
          
          # 复制配置文件
          if (Test-Path "${{ env.CONFIG_DIR }}" -PathType Container) {
            Copy-Item -Path "${{ env.CONFIG_DIR }}\*" -Destination "$packageDir\${{ env.CONFIG_DIR }}\" -Recurse -Force
            Write-Host "配置文件已复制到包中"
          } else {
            Write-Host "警告: 配置目录 ${{ env.CONFIG_DIR }} 不存在"
          }
          
          # 使用 PowerShell 内置压缩工具
          Compress-Archive -Path "$packageDir\*" -DestinationPath $archiveName -Force
          
          # 验证压缩包
          if (-not (Test-Path $archiveName -PathType Leaf)) {
            Write-Error "错误: 压缩包创建失败!"
            exit 1
          }
          
          # 设置输出变量
          echo "ARCHIVE_PATH=$archiveName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8NoBOM
          echo "archive_name=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBOM
          
          Write-Host "✅ 压缩包创建成功: $archiveName"
          $fileSize = (Get-Item $archiveName).Length
          Write-Host "文件大小: $([math]::Round($fileSize/1MB, 2)) MB"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ${{ env.ARCHIVE_PATH }}
          retention-days: 3
          if-no-files-found: error

  create-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build-and-package
    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}
      release_id: ${{ steps.create_draft_release.outputs.id }}
      target_tag: ${{ needs.build-and-package.outputs.target_tag }}
    steps:
      - name: Delete old Release (including drafts)
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = "${{ needs.build-and-package.outputs.target_tag }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            try {
              const oldRelease = await octokit.rest.repos.getReleaseByTag({ owner, repo, tag: tagName });
              await octokit.rest.repos.deleteRelease({ owner, repo, release_id: oldRelease.data.id });
              console.log(`✅ 删除旧 Release: ${tagName}`);
            } catch (error) {
              if (error.status !== 404) throw error;
              console.log(`ℹ️ 未找到已存在的 Release: ${tagName}`);
            }
            
            try {
              const releases = await octokit.rest.repos.listReleases({ owner, repo });
              const draftRelease = releases.data.find(r => r.tag_name === tagName && r.draft);
              if (draftRelease) {
                await octokit.rest.repos.deleteRelease({ owner, repo, release_id: draftRelease.id });
                console.log(`✅ 删除草稿 Release: ${tagName}`);
              }
            } catch (error) {
              console.log(`ℹ️ 未找到草稿 Release: ${tagName}`);
            }

      - name: Create draft Release
        id: create_draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-package.outputs.target_tag }}
          release_name: Erebus ${{ needs.build-and-package.outputs.target_tag }}
          draft: true
          prerelease: false
          body: |
            ## Erebus ${{ needs.build-and-package.outputs.target_tag }}
            
            ### 🚀 新特性
            - 自动化构建和发布
            - 多平台支持
            
            ### 📦 下载链接
            - **Linux AMD64**: `erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-amd64.tar.gz`
            - **Linux ARM64**: `erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-arm64.tar.gz`
            - **Windows AMD64**: `erebus_${{ needs.build-and-package.outputs.target_tag }}_windows-amd64.zip`
            - **macOS AMD64**: `erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-amd64.tar.gz`
            - **macOS ARM64**: `erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-arm64.tar.gz`
            
            ### 🔧 使用说明
            1. 下载对应平台的压缩包
            2. 解压文件
            3. 运行可执行文件
            
            ### 📋 校验和
            SHA256 校验和将在文件上传后自动生成。

  upload-to-release:
    name: Upload ${{ matrix.platform.name }} to Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-amd64
            archive_format: tar.gz
          - name: linux-arm64
            archive_format: tar.gz
          - name: windows-amd64
            archive_format: zip
          - name: darwin-amd64
            archive_format: tar.gz
          - name: darwin-arm64
            archive_format: tar.gz

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ./artifacts
          merge-multiple: false

      - name: Show downloaded files and find correct archive
        run: |
          echo "Artifacts directory contents:"
          ls -la ./artifacts
          
          # 动态查找匹配的文件
          TARGET_PATTERN="${{ env.APP_NAME }}_*_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          echo "查找模式: $TARGET_PATTERN"
          
          TARGET_FILE=$(find ./artifacts -name "$TARGET_PATTERN" -type f | head -1)
          if [ -n "$TARGET_FILE" ]; then
            echo "✅ 找到目标文件: $TARGET_FILE"
            # 获取文件名（不含路径）
            FILENAME=$(basename "$TARGET_FILE")
            echo "文件名: $FILENAME"
          
            # 重命名为期望的文件名（如果需要）
            EXPECTED_NAME="${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
            if [ "$FILENAME" != "$EXPECTED_NAME" ]; then
              echo "重命名: $FILENAME -> $EXPECTED_NAME"
              mv "$TARGET_FILE" "./artifacts/$EXPECTED_NAME"
              TARGET_FILE="./artifacts/$EXPECTED_NAME"
            else
              echo "文件名已符合预期，无需重命名"
            fi
          else
            echo "❌ 错误: 未找到匹配的文件!"
            echo "当前目录下的文件:"
            find ./artifacts -type f -name "*.${matrix.platform.archive_format}" || echo "未找到压缩文件"
            exit 1
          fi
          
          # 验证文件存在
          if [ -f "$TARGET_FILE" ]; then
            echo "✅ 最终目标文件: $TARGET_FILE"
            echo "文件大小: $(du -h "$TARGET_FILE" | cut -f1)"
          else
            echo "❌ 错误: 目标文件不存在!"
            exit 1
          fi

      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_name: ${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_content_type: application/octet-stream

      - name: Generate SHA256 checksum
        run: |
          FILE_PATH="./artifacts/${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          if [ -f "$FILE_PATH" ]; then
            sha256sum "$FILE_PATH" > "$FILE_PATH.sha256"
            echo "✅ 生成 SHA256 校验和:"
            cat "$FILE_PATH.sha256"
          else
            echo "❌ 错误: 文件不存在，无法生成校验和"
            exit 1
          fi

      - name: Upload SHA256 checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}.sha256
          asset_name: ${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}.sha256
          asset_content_type: text/plain

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [upload-to-release, create-release]
    steps:
      - name: Publish draft release
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = ${{ needs.create-release.outputs.release_id }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            await octokit.rest.repos.updateRelease({
              owner,
              repo,
              release_id: releaseId,
              draft: false
            });
            console.log(`✅ 已发布 Release ID: ${releaseId}`);
            
            // 获取发布信息
            const release = await octokit.rest.repos.getRelease({
              owner,
              repo,
              release_id: releaseId
            });
            
            console.log(`📦 Release 信息:`);
            console.log(`- 标签: ${release.data.tag_name}`);
            console.log(`- 名称: ${release.data.name}`);
            console.log(`- 下载次数: ${release.data.assets.length} 个资源文件`);
            console.log(`- 发布地址: ${release.data.html_url}`);