name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            binary_name: erebus
            is_windows: false
          - os: macos-latest
            platform: darwin
            arch: amd64
            binary_name: erebus
            is_windows: false
          - os: windows-latest
            platform: windows
            arch: amd64
            binary_name: erebus.exe
            is_windows: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        # 为不同平台使用不同的shell和脚本
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"
        # Linux/macOS 使用 bash，Windows 使用 pwsh
        shell: bash

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        # 为不同平台使用不同的shell
        run: |
          if [ "${{ matrix.is_windows }}" = "true" ]; then
            make windows
          else
            make ${{ matrix.platform }}
          fi
        shell: bash

      - name: Prepare release assets
        # 所有平台都使用 PowerShell 以确保一致性
        shell: pwsh
        run: |
          # 从步骤输出中获取版本号
          $VERSION = "${{ steps.get_version.outputs.version }}"
          
          # 定义包名
          $PACKAGE_NAME = "erebus-${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}.zip"
          Write-Output "Package name: ${PACKAGE_NAME}"
          
          # 创建临时目录
          New-Item -ItemType Directory -Force -Path "release_temp"
          
          # 构建源文件路径和目标文件路径
          $SourceBinary = "bin/erebus-${{ matrix.platform }}-${{ matrix.arch }}"
          if ("${{ matrix.is_windows }}" -eq "true") {
            $SourceBinary = $SourceBinary + ".exe"
            $DestBinary = "release_temp/erebus.exe"
          } else {
            $DestBinary = "release_temp/erebus"
          }
          
          Write-Output "Copying from: $SourceBinary"
          Write-Output "Copying to: $DestBinary"
          
          # 复制二进制文件
          if (Test-Path $SourceBinary) {
            Copy-Item $SourceBinary $DestBinary
          } else {
            Write-Error "Binary file not found: $SourceBinary"
            exit 1
          }
          
          # 复制配置文件
          $ConfigFile = "etc/erebus.yaml"
          if (Test-Path $ConfigFile) {
            Copy-Item $ConfigFile "release_temp/"
          } else {
            Write-Warning "Config file not found: $ConfigFile"
          }
          
          # 创建 ZIP 文件
          Compress-Archive -Path "release_temp/*" -DestinationPath $PACKAGE_NAME -Force
          
          # 设置环境变量供后续步骤使用（PowerShell 方式）
          Write-Output "asset_path=$PACKAGE_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "asset_name=$PACKAGE_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 显示生成的文件
          Get-ChildItem *.zip
          
          # 清理临时目录
          Remove-Item -Recurse -Force "release_temp"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.asset_name }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/zip

      - name: Verify assets
        shell: pwsh
        run: |
          Write-Output "Generated assets:"
          Get-ChildItem *.zip | ForEach-Object { 
            Write-Output "  - $($_.Name) ($([math]::Round($_.Length/1KB, 2)) KB)"
          }