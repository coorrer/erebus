name: Release Erebus

permissions:
  contents: write  # 授予创建/删除Release和上传资产的权限

on:
  push:
    tags:
      - 'v*'  # 推送v开头的标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: 'Tag name for release (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  APP_NAME: erebus
  CONFIG_DIR: etc

jobs:
  build-and-package:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false  # 一个平台失败不影响其他平台
      matrix:
        platform:
          - name: linux-amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
            archive_format: tar.gz
          - name: linux-arm64
            runner: ubuntu-latest
            goos: linux
            goarch: arm64
            archive_format: tar.gz
          - name: windows-amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
            archive_format: zip
            binary_ext: .exe
          - name: darwin-amd64
            runner: macos-latest
            goos: darwin
            goarch: amd64
            archive_format: tar.gz
          - name: darwin-arm64
            runner: macos-latest
            goos: darwin
            goarch: arm64
            archive_format: tar.gz
    outputs:
      target_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      # 获取标签（Linux/macOS专用步骤）
      - name: Get target tag (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        id: get_tag_unix
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          fi

      # 获取标签（Windows专用步骤，使用PowerShell语法）
      - name: Get target tag (Windows)
        if: matrix.platform.goos == 'windows'
        id: get_tag_win
        run: |
          if ("${{ github.event_name }}" -eq "push") {
            Write-Output "tag=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          } else {
            Write-Output "tag=${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          }

      # 统一标签输出（Linux/macOS）
      - name: Set unified tag (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        id: get_tag_unix_final
        run: echo "tag=${{ steps.get_tag_unix.outputs.tag }}" >> $GITHUB_OUTPUT

      # 统一标签输出（Windows）
      - name: Set unified tag (Windows)
        if: matrix.platform.goos == 'windows'
        id: get_tag_win_final
        run: Write-Output "tag=${{ steps.get_tag_win.outputs.tag }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      # 合并标签输出（避免跨平台条件判断）
      - name: Combine tag output
        id: get_tag
        run: echo "tag=${{ steps.get_tag_unix_final.outputs.tag || steps.get_tag_win_final.outputs.tag }}" >> $GITHUB_OUTPUT

      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.get_tag.outputs.tag }}  # 切换到目标标签

      # 配置Go环境
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: go.sum

      # 构建项目
      - name: Build with Makefile
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          CGO_ENABLED: 0  # 静态编译
        run: make

      # 验证二进制文件（Linux/macOS）
      - name: Verify binary (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if [ ! -f "$BINARY" ]; then
            echo "Error: Binary '$BINARY' not found!"
            ls -la
            exit 1
          fi
          file "$BINARY"
          chmod +x "$BINARY"

      # 验证二进制文件（Windows）
      - name: Verify binary (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if (-not (Test-Path $binary -PathType Leaf)) {
            Write-Error "Error: Binary '$binary' not found!"
            Get-ChildItem
            exit 1
          }
          Get-Item $binary

      # 创建打包目录（Linux/macOS）
      - name: Create package (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          PACKAGE_DIR="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}"
          mkdir -p "$PACKAGE_DIR/${{ env.CONFIG_DIR }}"
          
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          cp "$BINARY" "$PACKAGE_DIR/"
          chmod +x "$BINARY"
          
          if [ -d "${{ env.CONFIG_DIR }}" ]; then
            cp -r "${{ env.CONFIG_DIR }}"/* "$PACKAGE_DIR/${{ env.CONFIG_DIR }}/" 2>/dev/null || true
          fi
          
          cat > "$PACKAGE_DIR/README.txt" << EOF
          Erebus $TAG - ${{ matrix.platform.name }}
          运行：cd $PACKAGE_DIR && ./$BINARY
          EOF

      # 创建打包目录（Windows）
      - name: Create package (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $tag = "${{ steps.get_tag.outputs.tag }}"
          $packageDir = "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}"
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          $configDir = "${{ env.CONFIG_DIR }}"
          
          New-Item -ItemType Directory -Path "$packageDir\$configDir" -Force | Out-Null
          Copy-Item -Path $binary -Destination "$packageDir\" -Force
          
          if (Test-Path $configDir -PathType Container) {
            Copy-Item -Path "$configDir\*" -Destination "$packageDir\$configDir\" -Recurse -Force
          }
          
          $readme = @"
          Erebus $tag - ${{ matrix.platform.name }}
          运行：cd $packageDir && .\$binary
          "@
          Set-Content -Path "$packageDir\README.txt" -Value $readme -Encoding UTF8

      # 创建压缩包（Linux/macOS）
      - name: Create archive (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          ARCHIVE="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          tar -czf "$ARCHIVE" "${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}"
          echo "ARCHIVE_PATH=$ARCHIVE" >> $GITHUB_ENV

      # 创建压缩包（Windows）
      - name: Create archive (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $tag = "${{ steps.get_tag.outputs.tag }}"
          $archive = "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          7z a -tzip $archive "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}\*"
          Write-Output "ARCHIVE_PATH=$archive" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      # 上传构建产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ${{ env.ARCHIVE_PATH }}
          retention-days: 3
          if-no-files-found: error

  # 创建Release（包含清理旧版本逻辑）
  create-release:
    name: Clean Old Release & Create New
    runs-on: ubuntu-latest
    needs: build-and-package
    outputs:
      upload_url: ${{ steps.create_new_release.outputs.upload_url }}
      target_tag: ${{ needs.build-and-package.outputs.target_tag }}
    steps:
      # 清理旧版本Release
      - name: Delete old Release if exists
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = "${{ needs.build-and-package.outputs.target_tag }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            try {
              // 使用自动注入的octokit对象（无需声明）
              const oldRelease = await octokit.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
              });
            
              await octokit.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: oldRelease.data.id
              });
              console.log(`Deleted old release for tag: ${tagName}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`No old release found for tag: ${tagName}`);
              } else {
                throw error;
              }
            }

      # 创建新的Release
      - name: Create new Release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-package.outputs.target_tag }}
          release_name: Erebus ${{ needs.build-and-package.outputs.target_tag }}
          draft: false
          prerelease: false
          body: |
            ## Erebus ${{ needs.build-and-package.outputs.target_tag }}
            
            ### 下载链接
            - Linux AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-amd64.tar.gz
            - Linux ARM64: erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-arm64.tar.gz
            - Windows AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_windows-amd64.zip
            - macOS AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-amd64.tar.gz
            - macOS ARM64: erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-arm64.tar.gz

  # 上传资产到Release
  upload-to-release:
    name: Upload ${{ matrix.platform.name }} to Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-amd64
            archive_format: tar.gz
          - name: linux-arm64
            archive_format: tar.gz
          - name: windows-amd64
            archive_format: zip
          - name: darwin-amd64
            archive_format: tar.gz
          - name: darwin-arm64
            archive_format: tar.gz
    steps:
      # 下载构建产物
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ./artifacts

      # 上传到Release
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_name: ${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_content_type: application/octet-stream
    