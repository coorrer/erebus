name: Release Erebus

permissions:
  contents: write  # 必须：删除/创建 Release、上传资产的权限
  actions: read

on:
  push:
    tags:
      - 'v*'  # 推送 v 开头标签触发（如 v1.0.0）
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: 'Tag name for release (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  APP_NAME: erebus
  CONFIG_DIR: etc

jobs:
  # 第一步：仅构建打包（不提前清理，避免构建耗时期间重复触发冲突）
  build-and-package:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false  # 一个平台失败不影响其他
      matrix:
        platform:
          - name: linux-amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
            archive_format: tar.gz
          - name: linux-arm64
            runner: ubuntu-latest
            goos: linux
            goarch: arm64
            archive_format: tar.gz
          - name: windows-amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
            archive_format: zip
            binary_ext: .exe
          - name: darwin-amd64
            runner: macos-latest
            goos: darwin
            goarch: amd64
            archive_format: tar.gz
          - name: darwin-arm64
            runner: macos-latest
            goos: darwin
            goarch: arm64
            archive_format: tar.gz
    outputs:
      target_tag: ${{ steps.get_tag.outputs.tag }}  # 传递标签名给后续步骤
    steps:
      - name: Get target tag（统一标签来源）
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # 标签触发：使用推送的标签
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # 手动触发：使用输入的标签
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.get_tag.outputs.tag }}  # 切换到目标标签代码

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: go.sum

      - name: Build with Makefile
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          CGO_ENABLED: 0  # 静态编译，跨平台兼容
        run: make

      - name: Verify binary (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if [ ! -f "$BINARY" ]; then
            echo "Error: Binary '$BINARY' not found!"
            ls -la
            exit 1
          fi
          file "$BINARY"
          chmod +x "$BINARY"

      - name: Verify binary (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          if (-not (Test-Path $binary -PathType Leaf)) {
            Write-Error "Binary '$binary' not found!"
            Get-ChildItem
            exit 1
          }
          Get-Item $binary

      - name: Create package (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          PACKAGE_DIR="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}"
          mkdir -p "$PACKAGE_DIR/${{ env.CONFIG_DIR }}"
          
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          cp "$BINARY" "$PACKAGE_DIR/"
          chmod +x "$BINARY"
          
          if [ -d "${{ env.CONFIG_DIR }}" ]; then
            cp -r "${{ env.CONFIG_DIR }}"/* "$PACKAGE_DIR/${{ env.CONFIG_DIR }}/" 2>/dev/null || true
          fi
          
          # 生成 README
          cat > "$PACKAGE_DIR/README.txt" << EOF
          Erebus $TAG - ${{ matrix.platform.name }}
          运行：cd $PACKAGE_DIR && ./$BINARY
          EOF

      - name: Create package (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $tag = "${{ steps.get_tag.outputs.tag }}"
          $packageDir = "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}"
          $binary = "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          $configDir = "${{ env.CONFIG_DIR }}"
          
          New-Item -ItemType Directory -Path "$packageDir\$configDir" -Force | Out-Null
          Copy-Item -Path $binary -Destination "$packageDir\" -Force
          
          if (Test-Path $configDir -PathType Container) {
            Copy-Item -Path "$configDir\*" -Destination "$packageDir\$configDir\" -Recurse -Force
          }
          
          # 生成 README（避免变量解析冲突）
          $readme = @"
          Erebus $tag - ${{ matrix.platform.name }}
          运行：cd $packageDir && .\$binary
          "@
          Set-Content -Path "$packageDir\README.txt" -Value $readme -Encoding UTF8

      - name: Create archive (Linux/macOS)
        if: matrix.platform.goos != 'windows'
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          ARCHIVE="${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          tar -czf "$ARCHIVE" "${{ env.APP_NAME }}_${TAG}_${{ matrix.platform.name }}"
          echo "ARCHIVE_PATH=$ARCHIVE" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: matrix.platform.goos == 'windows'
        run: |
          $tag = "${{ steps.get_tag.outputs.tag }}"
          $archive = "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
          7z a -tzip $archive "${{ env.APP_NAME }}_$tag_${{ matrix.platform.name }}\*"
          echo "ARCHIVE_PATH=$archive" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Upload artifact（暂存压缩包，供后续上传）
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ${{ env.ARCHIVE_PATH }}
          retention-days: 3  # 保留3天，确保上传步骤有足够时间获取
          if-no-files-found: error

  # 第二步：创建 Release（上传前清理旧 Release）
  create-release:
    name: Clean Old Release & Create New
    runs-on: ubuntu-latest
    needs: build-and-package  # 等待所有平台构建完成
    outputs:
      upload_url: ${{ steps.create_new_release.outputs.upload_url }}  # 上传地址
      target_tag: ${{ needs.build-and-package.outputs.target_tag }}   # 标签名
    steps:
      - name: Delete old Release（上传前清理）
        uses: actions/github-script@v7  # 调用 GitHub API 删除旧 Release
        with:
          script: |
            const tagName = "${{ needs.build-and-package.outputs.target_tag }}";
            const octokit = github.rest;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            try {
              // 1. 查找该标签对应的旧 Release
              const oldRelease = await octokit.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
              });
            
              // 2. 删除旧 Release（会自动保留标签，仅删除 Release 记录和资产）
              await octokit.repos.deleteRelease({
                owner,
                repo,
                release_id: oldRelease.data.id
              });
              console.log(`✅ Deleted old release for tag: ${tagName} (ID: ${oldRelease.data.id})`);
            } catch (error) {
              // 若旧 Release 不存在（404 错误），直接跳过
              if (error.status === 404) {
                console.log(`ℹ️ No old release found for tag: ${tagName}, proceeding...`);
              } else {
                // 其他错误（如权限不足）抛出，终止流程
                console.error(`❌ Failed to delete old release: ${error.message}`);
                throw error;
              }
            }

      - name: Create new Release（清理后立即创建新 Release）
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-package.outputs.target_tag }}
          release_name: Erebus ${{ needs.build-and-package.outputs.target_tag }}
          draft: false  # 直接发布（如需审核可设为 true）
          prerelease: false
          body: |
            ## Erebus ${{ needs.build-and-package.outputs.target_tag }}
            ### 下载链接
            - Linux AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-amd64.tar.gz
            - Linux ARM64: erebus_${{ needs.build-and-package.outputs.target_tag }}_linux-arm64.tar.gz
            - Windows AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_windows-amd64.zip
            - macOS AMD64: erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-amd64.tar.gz
            - macOS ARM64: erebus_${{ needs.build-and-package.outputs.target_tag }}_darwin-arm64.tar.gz

  # 第三步：上传资产到新 Release（清理后创建的 Release 可正常上传）
  upload-to-release:
    name: Upload ${{ matrix.platform.name }} to Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package]  # 依赖“清理+创建 Release”和“构建”
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-amd64
            archive_format: tar.gz
          - name: linux-arm64
            archive_format: tar.gz
          - name: windows-amd64
            archive_format: zip
          - name: darwin-amd64
            archive_format: tar.gz
          - name: darwin-arm64
            archive_format: tar.gz
    steps:
      - name: Download artifact（获取之前构建的压缩包）
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
          path: ./artifacts  # 压缩包保存到 artifacts 目录

      - name: Upload to Release（此时 Release 是全新的，无“不可修改”问题）
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}  # 新 Release 的上传地址
          asset_path: ./artifacts/${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_name: ${{ env.APP_NAME }}_${{ needs.create-release.outputs.target_tag }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
          asset_content_type: application/octet-stream  # 二进制文件通用类型