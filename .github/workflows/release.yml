name: Release Erebus

on:
  push:
    tags:
      - 'v*'  # 推送 v 开头的标签时触发
  workflow_dispatch:  # 允许手动触发

env:
  APP_NAME: erebus
  CONFIG_DIR: etc

jobs:
  build-and-package:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - name: linux-amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
            archive_format: tar.gz
          - name: linux-arm64
            runner: ubuntu-latest
            goos: linux
            goarch: arm64
            archive_format: tar.gz
          - name: windows-amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
            archive_format: zip
            binary_ext: .exe
          - name: darwin-amd64
            runner: macos-latest
            goos: darwin
            goarch: amd64
            archive_format: tar.gz
          - name: darwin-arm64
            runner: macos-latest
            goos: darwin
            goarch: arm64
            archive_format: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build with Makefile
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
        run: |
          make

      - name: Verify binary
        run: |
          if [ "${{ matrix.platform.goos }}" = "windows" ]; then
            # Windows 使用 PowerShell 语法
            if (-Not (Test-Path "${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}")) {
              Write-Error "Error: Binary ${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }} not found!"
              Get-ChildItem
              exit 1
            }
          else
            # Linux/Mac 使用 bash 语法
            BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
            if [ ! -f "$BINARY" ]; then
              echo "Error: Binary $BINARY not found!"
              ls -la
              exit 1
            fi
            file $BINARY
            chmod +x $BINARY
          fi

      - name: Create package directory
        run: |
          PACKAGE_DIR="${{ env.APP_NAME }}_${{ github.ref_name }}_${{ matrix.platform.name }}"
          mkdir -p $PACKAGE_DIR/${{ env.CONFIG_DIR }}
          
          # 复制二进制文件
          BINARY="${{ env.APP_NAME }}${{ matrix.platform.binary_ext || '' }}"
          cp $BINARY $PACKAGE_DIR/
          
          if [ "${{ matrix.platform.goos }}" != "windows" ]; then
            chmod +x $PACKAGE_DIR/$BINARY
          fi
          
          # 复制配置文件（如果存在）
          if [ -d "${{ env.CONFIG_DIR }}" ]; then
            cp -r ${{ env.CONFIG_DIR }}/* $PACKAGE_DIR/${{ env.CONFIG_DIR }}/ 2>/dev/null || true
          fi
          
          # 创建说明文件
          cat > $PACKAGE_DIR/README.txt << EOF
          Erebus ${{ github.ref_name }} - ${{ matrix.platform.name }}

          包含文件:
            - $BINARY: 主程序
            - ${{ env.CONFIG_DIR }}/: 配置文件目录
          
          运行方式:
            ./$BINARY
          EOF

- name: Create archive
  run: |
    PACKAGE_DIR="${{ env.APP_NAME }}_${{ github.ref_name }}_${{ matrix.platform.name }}"
    ARCHIVE_NAME="${{ env.APP_NAME }}_${{ github.ref_name }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}"
    
    if [ "${{ matrix.platform.archive_format }}" = "tar.gz" ]; then
      tar -czf $ARCHIVE_NAME $PACKAGE_DIR
    else
      # Windows 使用 7z（GitHub Windows 环境自带）
      7z a $ARCHIVE_NAME $PACKAGE_DIR\\
    fi
    
    echo "ARCHIVE_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV
    echo "PACKAGE_DIR=$PACKAGE_DIR" >> $GITHUB_ENV

- name: Upload artifact
  uses: actions/upload-artifact@v4
  with:
    name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
    path: ${{ env.ARCHIVE_PATH }}
    retention-days: 1

create-release:
  name: Create Release
  runs-on: ubuntu-latest
  needs: build-and-package
  if: startsWith(github.ref, 'refs/tags/v')
  outputs:
    upload_url: ${{ steps.create_release.outputs.upload_url }}
  steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Erebus ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Erebus ${{ github.ref_name }}
          
          多平台发布版本，包含可执行文件和配置文件。
          
          ### 下载
          - **Linux AMD64**: `erebus_${{ github.ref_name }}_linux-amd64.tar.gz`
          - **Linux ARM64**: `erebus_${{ github.ref_name }}_linux-arm64.tar.gz`
          - **Windows AMD64**: `erebus_${{ github.ref_name }}_windows-amd64.zip`
          - **macOS AMD64**: `erebus_${{ github.ref_name }}_darwin-amd64.tar.gz`
          - **macOS ARM64**: `erebus_${{ github.ref_name }}_darwin-arm64.tar.gz`
          
          ### 包含内容
          每个包包含：
          - `erebus` (或 `erebus.exe`) - 主程序
          - `etc/` - 配置文件目录

upload-release:
  name: Upload to Release
  runs-on: ubuntu-latest
  needs: [create-release, build-and-package]
  if: startsWith(github.ref, 'refs/tags/v')
  strategy:
    matrix:
      platform:
        - name: linux-amd64
          archive_format: tar.gz
        - name: linux-arm64
          archive_format: tar.gz
        - name: windows-amd64
          archive_format: zip
        - name: darwin-amd64
          archive_format: tar.gz
        - name: darwin-arm64
          archive_format: tar.gz

  steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.platform.name }}
        path: ./artifacts

    - name: Upload to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./artifacts/${{ env.APP_NAME }}_${{ github.ref_name }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
        asset_name: ${{ env.APP_NAME }}_${{ github.ref_name }}_${{ matrix.platform.name }}.${{ matrix.platform.archive_format }}
        asset_content_type: application/octet-stream